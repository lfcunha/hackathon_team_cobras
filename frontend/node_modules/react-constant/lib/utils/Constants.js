'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fnUtils = require('./fnUtils');

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* generate and return a constant
* if constant exist just return it
*/

var Constants = (function () {
  function Constants(namespace) {
    _classCallCheck(this, Constants);

    this.namespace = namespace;
  }

  _createClass(Constants, [{
    key: 'of',
    value: function of(key) {
      if (typeof key !== 'string') {
        throw new Error('Expect key of constants to be string, but accept type ' + (typeof key === 'undefined' ? 'undefined' : _typeof(key)));
      }
      if (typeof this[key] !== 'undefined') {
        return this[key];
      }
      this[key] = this.namespace + '-' + key + '-' + (0, _fnUtils.randomBase64)();
      return this[key];
    }
  }]);

  return Constants;
})();

exports.default = Constants;
module.exports = exports['default'];