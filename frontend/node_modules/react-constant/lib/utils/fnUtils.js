'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomBase64 = randomBase64;

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; } /**
                                                                                                                              * Generate random base 64 which length
                                                                                                                              * determinate by param , default to 5;
                                                                                                                              * @param  {...[number, number]} arg  slice start index
                                                                                                                              *  and end index
                                                                                                                              * @return {String}        encoded string
                                                                                                                              */

function randomBase64() {
  var start = typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'number' ? arguments.length <= 0 ? undefined : arguments[0] : -5;
  var end = typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'number' ? arguments.length <= 1 ? undefined : arguments[1] : undefined;
  var codedString = undefined;
  if ('object' === (typeof process === 'undefined' ? 'undefined' : _typeof(process)) && Object.prototype.toString.call(process) === '[object process]') {
    codedString = new Buffer(('' + _nodeUuid2.default.v4()).slice(2)).toString('base64').replace(/\=/g, '').slice(start, end);
  } else if ('undefined' !== typeof btoa) {
    codedString = btoa(Math.random()).replace(/\=/g, '').slice(start, end);
  } else {
    codedString = '';
  }

  if (codedString.length > 20) {
    codedString = codedString.slice(0, 20);
  }
  return codedString;
}